/*
DROP TABLE IF EXISTS bank.public.TOKENS;
DROP TABLE IF EXISTS bank.public.UPLOADS;
DROP TABLE IF EXISTS bank.public.CUSTOMERS;
DROP TABLE IF EXISTS BALANCES;
DROP TABLE IF EXISTS bank.public.ACCOUNTS;
DROP TABLE IF EXISTS bank.public.PRODUCTS;
DROP TABLE IF EXISTS bank.public.NATURES;
DROP TABLE IF EXISTS bank.public.ROLES_MENUS;
DROP TABLE IF EXISTS bank.public.USERS_ROLES;
DROP TABLE IF EXISTS bank.public.ROLES;
DROP TABLE IF EXISTS bank.public.MENUS;
DROP TABLE IF EXISTS bank.public.USERS;
DROP TABLE IF EXISTS bank.public.flyway_schema_history;
*/

CREATE TABLE bank.public.USERS (
    ID SERIAL PRIMARY KEY,
    USERNAME VARCHAR(255) UNIQUE NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    STATUS BOOLEAN DEFAULT TRUE,
    PICTURE BYTEA DEFAULT NULL
);

CREATE TABLE bank.public.ROLES (
    ID SERIAL PRIMARY KEY,
    ROLE VARCHAR(50) NOT NULL
);

CREATE TABLE bank.public.USERS_ROLES (
    ID SERIAL PRIMARY KEY,
    USER_ID INTEGER,
    ROLE_ID INTEGER,
    CONSTRAINT USERS_ROLES_USERS_FK FOREIGN KEY (USER_ID) REFERENCES bank.public.USERS(ID)
        ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT USERS_ROLES_ROLES_FK FOREIGN KEY (ROLE_ID) REFERENCES bank.public.ROLES(ID)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE bank.public.MENUS (
    ID SERIAL PRIMARY KEY,
    USER_INTERFACE VARCHAR(50)
);


CREATE TABLE bank.public.ROLES_MENUS (
    ID SERIAL PRIMARY KEY,
    ROLE_ID INTEGER,
    MENU_ID INTEGER,
    CONSTRAINT ROLES_MENUS_ROLES_FK FOREIGN KEY (ROLE_ID) REFERENCES bank.public.ROLES(ID)
        ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT ROLES_MENUS_MENUS_FK FOREIGN KEY (MENU_ID) REFERENCES bank.public.MENUS(ID)
     ON UPDATE CASCADE ON DELETE CASCADE
);


CREATE TABLE bank.public.NATURES (
    ID SERIAL PRIMARY KEY,
    TYPE VARCHAR(255)
);

CREATE TABLE bank.public.PRODUCTS (
    ID SERIAL PRIMARY KEY,
    NATURE_ID INTEGER,
    CODE VARCHAR(50) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    CONSTRAINT PRODUCTS_NATURES_FK FOREIGN KEY (NATURE_ID) REFERENCES bank.public.NATURES(ID)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE bank.public.ACCOUNTS (
    ID SERIAL PRIMARY KEY,
    PRODUCT_ID INTEGER,
    ACCOUNT_NO VARCHAR(13) UNIQUE NOT NULL,
    CONSTRAINT ACCOUNTS_PRODUCTS_FK FOREIGN KEY (PRODUCT_ID) REFERENCES bank.public.PRODUCTS(ID)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE bank.public.BALANCES (
    ID SERIAL PRIMARY KEY,
    ACCOUNT_ID INTEGER,
    DEBIT NUMERIC DEFAULT NULL,
    CREDIT NUMERIC DEFAULT NULL,
    BALANCE NUMERIC DEFAULT NULL,
    TRANSACTION_DATETIME TIMESTAMP,
    DESCRIPTION TEXT DEFAULT NULL,
    CONSTRAINT BALANCES_ACCOUNTS_FK FOREIGN KEY (ACCOUNT_ID) REFERENCES bank.public.ACCOUNTS(ID)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE bank.public.CUSTOMERS (
   ID SERIAL PRIMARY KEY,
   ACCOUNT_ID INTEGER,
   FULL_NAME VARCHAR(255) DEFAULT NULL,
   DOB VARCHAR(255) DEFAULT NULL,
   NID_NO VARCHAR(255) DEFAULT NULL,
   FATHER_NAME VARCHAR(255) DEFAULT NULL,
   MOTHER_NAME VARCHAR(255) DEFAULT NULL,
   PHONE_NO VARCHAR(12) DEFAULT NULL,
   ADDRESS TEXT DEFAULT NULL,
   CONSTRAINT CUSTOMERS_ACCOUNTS_FK FOREIGN KEY (ACCOUNT_ID) REFERENCES bank.public.ACCOUNTS(ID)
       ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE UPLOADS (
    ID SERIAL PRIMARY KEY,
    CUSTOMER_ID INTEGER,
    NID BYTEA DEFAULT NULL,
    PICTURE BYTEA DEFAULT NULL,
    CONSTRAINT UPLOADS_CUSTOMERS_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES bank.public.CUSTOMERS(ID)
     ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE bank.public.TOKENS (
    ID SERIAL PRIMARY KEY,
    TOKEN VARCHAR(255) DEFAULT NULL,
    CREATED_ON TIMESTAMP DEFAULT NULL
);